import { EventEmitter, QueryList, TemplateRef, OnInit } from '@angular/core';
import { DataTableColumn } from './column.component';
import { DataTableRow } from './row.component';
import { DataTableParams, DataTableSortCallback } from './types';
import { RowCallback } from './types';
import { DataTableTranslations } from './types';
import * as ɵngcc0 from '@angular/core';
export declare class DataTable implements DataTableParams, OnInit {
    private _items;
    items: any[];
    itemCount: number;
    columns: QueryList<DataTableColumn>;
    rows: QueryList<DataTableRow>;
    expandTemplate: TemplateRef<any>;
    headerTitle: string;
    header: boolean;
    pagination: boolean;
    indexColumn: boolean;
    indexColumnHeader: string;
    rowColors: RowCallback;
    rowTooltip: RowCallback;
    selectColumn: boolean;
    multiSelect: boolean;
    substituteRows: boolean;
    expandableRows: boolean;
    translations: DataTableTranslations;
    selectOnRowClick: boolean;
    autoReload: boolean;
    showReloading: boolean;
    showDownloadButton: boolean;
    indexColumnVisible: boolean;
    selectColumnVisible: boolean;
    expandColumnVisible: boolean;
    private _sortBy;
    private _sortAsc;
    private _customSort;
    private _offset;
    private _limit;
    sortBy: string;
    sortAsc: boolean;
    customSort: DataTableSortCallback;
    offset: number;
    limit: number;
    page: number;
    readonly lastPage: number;
    sort(sortBy: string, asc: boolean, customSort: DataTableSortCallback): void;
    ngOnInit(): void;
    private _initDefaultValues();
    private _initDefaultClickEvents();
    _reloading: boolean;
    readonly reloading: boolean;
    reload: EventEmitter<{}>;
    reloadItems(): void;
    private _onReloadFinished();
    _displayParams: DataTableParams;
    readonly displayParams: DataTableParams;
    _updateDisplayParams(): void;
    _scheduledReload: any;
    _triggerReload(): void;
    download: EventEmitter<{}>;
    downloadItems(): void;
    rowClick: EventEmitter<{}>;
    rowDoubleClick: EventEmitter<{}>;
    headerClick: EventEmitter<{}>;
    cellClick: EventEmitter<{}>;
    rowExpandChange: EventEmitter<{}>;
    private rowClicked(row, event);
    private rowDoubleClicked(row, event);
    private headerClicked(column, event);
    private cellClicked(column, row, event);
    private _getRemoteParameters();
    private sortColumn(column);
    readonly columnCount: number;
    private getRowColor(item, index, row);
    selectedRow: DataTableRow;
    selectedRows: DataTableRow[];
    private _selectAllCheckbox;
    selectAllCheckbox: boolean;
    private _onSelectAllChanged(value);
    onRowSelectChanged(row: DataTableRow): void;
    onRowExpandChanged(row: DataTableRow): void;
    readonly substituteItems: {}[];
    private _resizeInProgress;
    private resizeColumnStart(event, column, columnElement);
    resizeLimit: number;
    private _isResizeInLimit(columnElement, dx);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DataTable, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DataTable, "data-table", never, { "header": "header"; "pagination": "pagination"; "indexColumn": "indexColumn"; "indexColumnHeader": "indexColumnHeader"; "selectColumn": "selectColumn"; "multiSelect": "multiSelect"; "substituteRows": "substituteRows"; "expandableRows": "expandableRows"; "translations": "translations"; "selectOnRowClick": "selectOnRowClick"; "autoReload": "autoReload"; "showReloading": "showReloading"; "showDownloadButton": "showDownloadButton"; "items": "items"; "sortBy": "sortBy"; "sortAsc": "sortAsc"; "customSort": "customSort"; "offset": "offset"; "limit": "limit"; "page": "page"; "itemCount": "itemCount"; "headerTitle": "headerTitle"; "rowColors": "rowColors"; "rowTooltip": "rowTooltip"; }, { "reload": "reload"; "download": "download"; "rowClick": "rowClick"; "rowDoubleClick": "rowDoubleClick"; "headerClick": "headerClick"; "cellClick": "cellClick"; "rowExpandChange": "rowExpandChange"; }, ["expandTemplate", "columns"], never>;
}

//# sourceMappingURL=table.component.d.ts.map